//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\tdbots\techdays\ConsoleApplication2\Antlrtest\\Hello.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class HelloLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, VAR=3, INT=4, MUL=5, DIV=6, ADD=7, SUB=8, EQU=9, NEQU=10, 
		NULL=11, AND=12, OR=13, GTE=14, GT=15, LTE=16, LT=17, STR=18, WS=19;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "VAR", "INT", "MUL", "DIV", "ADD", "SUB", "EQU", "NEQU", 
		"NULL", "AND", "OR", "GTE", "GT", "LTE", "LT", "STR", "WS"
	};


	    protected const int EOF = Eof;
	    protected const int HIDDEN = Hidden;


	public HelloLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", null, null, "'*'", "'/'", "'+'", "'-'", "'=='", "'!='", 
		"'NULL'", "'AND'", "'OR'", "'>='", "'>'", "'<='", "'<'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "VAR", "INT", "MUL", "DIV", "ADD", "SUB", "EQU", "NEQU", 
		"NULL", "AND", "OR", "GTE", "GT", "LTE", "LT", "STR", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Hello.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static HelloLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x15");
		sb.Append("l\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x3\x2\x3\x2\x3\x3\x3\x3\x3");
		sb.Append("\x4\x3\x4\a\x4\x30\n\x4\f\x4\xE\x4\x33\v\x4\x3\x5\x6\x5\x36");
		sb.Append("\n\x5\r\x5\xE\x5\x37\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3");
		sb.Append("\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3");
		sb.Append("\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\x10");
		sb.Append("\x3\x10\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3");
		sb.Append("\x13\x3\x13\a\x13\x62\n\x13\f\x13\xE\x13\x65\v\x13\x3\x13\x3");
		sb.Append("\x13\x3\x14\x3\x14\x3\x14\x3\x14\x2\x2\x15\x3\x3\x5\x4\a\x5");
		sb.Append("\t\x6\v\a\r\b\xF\t\x11\n\x13\v\x15\f\x17\r\x19\xE\x1B\xF\x1D");
		sb.Append("\x10\x1F\x11!\x12#\x13%\x14\'\x15\x3\x2\a\x5\x2\x32;\x43\\\x63");
		sb.Append("|\x3\x2\x32;\x6\x2\f\f\xF\xF$$^^\x4\x2$$^^\x5\x2\f\f\xF\xF\"");
		sb.Append("\"o\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2");
		sb.Append("\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2");
		sb.Append("\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2");
		sb.Append("\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2");
		sb.Append("\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3");
		sb.Append("\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x3)\x3\x2\x2\x2\x5");
		sb.Append("+\x3\x2\x2\x2\a-\x3\x2\x2\x2\t\x35\x3\x2\x2\x2\v\x39\x3\x2\x2");
		sb.Append("\x2\r;\x3\x2\x2\x2\xF=\x3\x2\x2\x2\x11?\x3\x2\x2\x2\x13\x41");
		sb.Append("\x3\x2\x2\x2\x15\x44\x3\x2\x2\x2\x17G\x3\x2\x2\x2\x19L\x3\x2");
		sb.Append("\x2\x2\x1BP\x3\x2\x2\x2\x1DS\x3\x2\x2\x2\x1FV\x3\x2\x2\x2!X");
		sb.Append("\x3\x2\x2\x2#[\x3\x2\x2\x2%]\x3\x2\x2\x2\'h\x3\x2\x2\x2)*\a");
		sb.Append("*\x2\x2*\x4\x3\x2\x2\x2+,\a+\x2\x2,\x6\x3\x2\x2\x2-\x31\a&\x2");
		sb.Append("\x2.\x30\t\x2\x2\x2/.\x3\x2\x2\x2\x30\x33\x3\x2\x2\x2\x31/\x3");
		sb.Append("\x2\x2\x2\x31\x32\x3\x2\x2\x2\x32\b\x3\x2\x2\x2\x33\x31\x3\x2");
		sb.Append("\x2\x2\x34\x36\t\x3\x2\x2\x35\x34\x3\x2\x2\x2\x36\x37\x3\x2");
		sb.Append("\x2\x2\x37\x35\x3\x2\x2\x2\x37\x38\x3\x2\x2\x2\x38\n\x3\x2\x2");
		sb.Append("\x2\x39:\a,\x2\x2:\f\x3\x2\x2\x2;<\a\x31\x2\x2<\xE\x3\x2\x2");
		sb.Append("\x2=>\a-\x2\x2>\x10\x3\x2\x2\x2?@\a/\x2\x2@\x12\x3\x2\x2\x2");
		sb.Append("\x41\x42\a?\x2\x2\x42\x43\a?\x2\x2\x43\x14\x3\x2\x2\x2\x44\x45");
		sb.Append("\a#\x2\x2\x45\x46\a?\x2\x2\x46\x16\x3\x2\x2\x2GH\aP\x2\x2HI");
		sb.Append("\aW\x2\x2IJ\aN\x2\x2JK\aN\x2\x2K\x18\x3\x2\x2\x2LM\a\x43\x2");
		sb.Append("\x2MN\aP\x2\x2NO\a\x46\x2\x2O\x1A\x3\x2\x2\x2PQ\aQ\x2\x2QR\a");
		sb.Append("T\x2\x2R\x1C\x3\x2\x2\x2ST\a@\x2\x2TU\a?\x2\x2U\x1E\x3\x2\x2");
		sb.Append("\x2VW\a@\x2\x2W \x3\x2\x2\x2XY\a>\x2\x2YZ\a?\x2\x2Z\"\x3\x2");
		sb.Append("\x2\x2[\\\a>\x2\x2\\$\x3\x2\x2\x2]\x63\a$\x2\x2^\x62\n\x4\x2");
		sb.Append("\x2_`\a^\x2\x2`\x62\t\x5\x2\x2\x61^\x3\x2\x2\x2\x61_\x3\x2\x2");
		sb.Append("\x2\x62\x65\x3\x2\x2\x2\x63\x61\x3\x2\x2\x2\x63\x64\x3\x2\x2");
		sb.Append("\x2\x64\x66\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2\x66g\a$\x2\x2g&");
		sb.Append("\x3\x2\x2\x2hi\t\x6\x2\x2ij\x3\x2\x2\x2jk\b\x14\x2\x2k(\x3\x2");
		sb.Append("\x2\x2\a\x2\x31\x37\x61\x63\x3\x2\x3\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
